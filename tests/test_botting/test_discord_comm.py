import unittest
from unittest.mock import patch, AsyncMock, MagicMock
from botting.communications.discord_comm import DiscordIO

# TODO - Try these tests, generated by Copilot
class TestDiscordIO(unittest.IsolatedAsyncioTestCase):
    @patch('botting.communications.discord_comm.discord.Client.get_all_channels')
    @patch('botting.utilities.config_reader')
    async def retrieves_specified_chat_channel(self, mock_config_reader, mock_get_all_channels):
        mock_config_reader.return_value = {
            'DEFAULT': {'user': 'test_user'},
            'User test_user': {'DISCORD_CHANNEL': 'test_channel'}
        }
        mock_get_all_channels.return_value = [MagicMock(id=123, name='test_channel', type=MagicMock(name='text'))]
        pipe = MagicMock()
        discord_io = DiscordIO(pipe)
        self.assertEqual(discord_io.chat_id, 123)

    @patch('botting.communications.discord_comm.discord.Client.get_all_channels')
    @patch('botting.utilities.config_reader')
    async def returns_none_if_no_specified_chat_channel(self, mock_config_reader, mock_get_all_channels):
        mock_config_reader.return_value = {
            'DEFAULT': {'user': 'test_user'},
            'User test_user': {'DISCORD_CHANNEL': 'non_existent_channel'}
        }
        mock_get_all_channels.return_value = [MagicMock(id=123, name='test_channel', type=MagicMock(name='text'))]
        pipe = MagicMock()
        discord_io = DiscordIO(pipe)
        with self.assertRaises(IndexError):
            discord_io.chat_id

    @patch('botting.utilities.config_reader')
    async def triggers_on_ready_callback(self, mock_config_reader):
        mock_config_reader.return_value = {
            'DEFAULT': {'user': 'test_user'}
        }
        pipe = MagicMock()
        discord_io = DiscordIO(pipe)
        with patch('botting.communications.discord_comm.logger.info') as mock_logger_info:
            await discord_io.on_ready()
            mock_logger_info.assert_called_with(f"Discord Communication Established with {discord_io.user}.")

    @patch('botting.utilities.config_reader')
    async def ignores_messages_from_bot_itself(self, mock_config_reader):
        mock_config_reader.return_value = {
            'DEFAULT': {'user': 'test_user'},
            'User test_user': {'DISCORD_ID': '123', 'DISCORD_CHANNEL': 'test_channel'}
        }
        pipe = MagicMock()
        discord_io = DiscordIO(pipe)
        discord_io.user = MagicMock(id=123)
        msg = MagicMock(author=discord_io.user)
        with patch('botting.communications.discord_comm.logger.info') as mock_logger_info:
            await discord_io.on_message(msg)
            mock_logger_info.assert_not_called()

    @patch('botting.utilities.config_reader')
    async def processes_valid_messages(self, mock_config_reader):
        mock_config_reader.return_value = {
            'DEFAULT': {'user': 'test_user'},
            'User test_user': {'DISCORD_ID': '123', 'DISCORD_CHANNEL': 'test_channel'}
        }
        pipe = MagicMock()
        discord_io = DiscordIO(pipe)
        discord_io.user = MagicMock(id=456)
        msg = MagicMock(author=MagicMock(id=123), channel=MagicMock(name='test_channel'), content='test_message')
        with patch('botting.communications.discord_comm.logger.info') as mock_logger_info:
            await discord_io.on_message(msg)
            pipe.send.assert_called_with('test_message')

    @patch('botting.utilities.config_reader')
    async def ignores_invalid_messages(self, mock_config_reader):
        mock_config_reader.return_value = {
            'DEFAULT': {'user': 'test_user'},
            'User test_user': {'DISCORD_ID': '123', 'DISCORD_CHANNEL': 'test_channel'}
        }
        pipe = MagicMock()
        discord_io = DiscordIO(pipe)
        discord_io.user = MagicMock(id=456)
        msg = MagicMock(author=MagicMock(id=789), channel=MagicMock(name='wrong_channel'), content='test_message')
        with patch('botting.communications.discord_comm.logger.info') as mock_logger_info:
            await discord_io.on_message(msg)
            pipe.send.assert_not_called()

    @patch('botting.utilities.config_reader')
    async def relays_string_message_to_discord(self, mock_config_reader):
        mock_config_reader.return_value = {
            'DEFAULT': {'user': 'test_user'},
            'User test_user': {'DISCORD_ID': '123', 'DISCORD_CHANNEL': 'test_channel'}
        }
        pipe = MagicMock()
        discord_io = DiscordIO(pipe)
        discord_io.chat_id = 123
        pipe.poll = AsyncMock(return_value=True)
        pipe.recv = MagicMock(return_value='test_signal')
        discord_io.get_channel = MagicMock(return_value=AsyncMock(send=AsyncMock()))
        with patch('botting.communications.discord_comm.logger.info') as mock_logger_info:
            await discord_io.relay_main_to_disc()
            discord_io.get_channel(123).send.assert_called_with('<@123> test_signal')

    @patch('botting.utilities.config_reader')
    async def relays_image_message_to_discord(self, mock_config_reader):
        mock_config_reader.return_value = {
            'DEFAULT': {'user': 'test_user'},
            'User test_user': {'DISCORD_ID': '123', 'DISCORD_CHANNEL': 'test_channel'}
        }
        pipe = MagicMock()
        discord_io = DiscordIO(pipe)
        discord_io.chat_id = 123
        pipe.poll = AsyncMock(return_value=True)
        pipe.recv = MagicMock(return_value=np.zeros((10, 10, 3), dtype=np.uint8))
        discord_io.get_channel = MagicMock(return_value=AsyncMock(send=AsyncMock()))
        with patch('botting.communications.discord_comm.cv2.imwrite') as mock_imwrite, \
             patch('botting.communications.discord_comm.os.remove') as mock_remove, \
             patch('builtins.open', new_callable=MagicMock) as mock_open:
            await discord_io.relay_main_to_disc()
            mock_imwrite.assert_called_with('temp.png', np.zeros((10, 10, 3), dtype=np.uint8))
            mock_open.assert_called_with('temp.png', 'rb')
            discord_io.get_channel(123).send.assert_called()
            mock_remove.assert_called_with('temp.png')

    @patch('botting.utilities.config_reader')
    async def stops_discord_communications_on_none_signal(self, mock_config_reader):
        mock_config_reader.return_value = {
            'DEFAULT': {'user': 'test_user'},
            'User test_user': {'DISCORD_ID': '123', 'DISCORD_CHANNEL': 'test_channel'}
        }
        pipe = MagicMock()
        discord_io = DiscordIO(pipe)
        pipe.poll = AsyncMock(return_value=True)
        pipe.recv = MagicMock(return_value=None)
        with patch('botting.communications.discord_comm.logger.info') as mock_logger_info:
            await discord_io.relay_main_to_disc()
            mock_logger_info.assert_called_with("Stopping Discord Communications.")
            pipe.send.assert_called_with(None)
            pipe.close.assert_called()
            discord_io.close.assert_called()